
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33+6 (git sha1 41b34a193, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1694128612374/work=/usr/local/src/conda/yosys-0.33_7_g41b34a193 -fdebug-prefix-map=/home/brandon/miniconda3/envs/digital=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)


-- Parsing `top.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (top.v:51)
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

-- Running command `prep -top top; hierarchy -check; proc; write_json sim/top.json' --

2. Executing PREP pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

2.2.1. Analyzing design hierarchy..
Top module:  \top

2.2.2. Analyzing design hierarchy..
Top module:  \top
Removing unused module `$abstract\top'.
Removed 1 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$top.v:194$45 in module top.
Marked 1 switch rules as full_case in process $proc$top.v:184$44 in module top.
Marked 3 switch rules as full_case in process $proc$top.v:116$25 in module top.
Marked 1 switch rules as full_case in process $proc$top.v:89$7 in module top.
Marked 1 switch rules as full_case in process $proc$top.v:81$6 in module top.
Marked 2 switch rules as full_case in process $proc$top.v:36$1 in module top.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 19 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top.$proc$top.v:0$46'.
  Set init value: \humidity = 16'0000000000000000
  Set init value: \temperature = 16'0000000000000000
  Set init value: \valid = 1'0
  Set init value: \state = 3'000
  Set init value: \fsm_state = 3'000
  Set init value: \shift_reg = 40'0000000000000000000000000000000000000000
  Set init value: \bit_count = 6'000000
  Set init value: \timer_init = 25'0000000000000000000000000
  Set init value: \timer_start_up = 12'000000000000
  Set init value: \timer_start_down = 22'0000000000000000000000
  Set init value: \timer_response = 15'000000000000000
  Set init value: \timer_wait_data = 13'0000000000000
  Set init value: \timer_bits = 14'00000000000000
  Set init value: \bit_done = 1'0
  Set init value: \dht11_out = 1'1
  Set init value: \count_clk50 = 3'000
  Set init value: \clk_50M = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$top.v:0$46'.
Creating decoders for process `\top.$proc$top.v:194$45'.
     1/1: $1\state[2:0]
Creating decoders for process `\top.$proc$top.v:184$44'.
     1/2: $0\temperature[15:0]
     2/2: $0\humidity[15:0]
Creating decoders for process `\top.$proc$top.v:116$25'.
     1/11: $0\dht11_out[0:0]
     2/11: $0\bit_done[0:0]
     3/11: $0\timer_bits[13:0]
     4/11: $0\timer_wait_data[12:0]
     5/11: $0\timer_response[14:0]
     6/11: $0\timer_start_down[21:0]
     7/11: $0\timer_start_up[11:0]
     8/11: $0\timer_init[24:0]
     9/11: $0\bit_count[5:0]
    10/11: $0\shift_reg[39:0]
    11/11: $0\valid[0:0]
Creating decoders for process `\top.$proc$top.v:89$7'.
     1/1: $1\next_state[2:0]
Creating decoders for process `\top.$proc$top.v:81$6'.
     1/1: $0\fsm_state[2:0]
Creating decoders for process `\top.$proc$top.v:36$1'.
     1/2: $0\count_clk50[2:0]
     2/2: $0\clk_50M[0:0]

2.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\top.\next_state' from process `\top.$proc$top.v:89$7': $auto$proc_dlatch.cc:427:proc_dlatch$231

2.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\state' using process `\top.$proc$top.v:194$45'.
  created $dff cell `$procdff$232' with positive edge clock.
Creating register for signal `\top.\humidity' using process `\top.$proc$top.v:184$44'.
  created $dff cell `$procdff$233' with positive edge clock.
Creating register for signal `\top.\temperature' using process `\top.$proc$top.v:184$44'.
  created $dff cell `$procdff$234' with positive edge clock.
Creating register for signal `\top.\valid' using process `\top.$proc$top.v:116$25'.
  created $dff cell `$procdff$235' with positive edge clock.
Creating register for signal `\top.\shift_reg' using process `\top.$proc$top.v:116$25'.
  created $dff cell `$procdff$236' with positive edge clock.
Creating register for signal `\top.\bit_count' using process `\top.$proc$top.v:116$25'.
  created $dff cell `$procdff$237' with positive edge clock.
Creating register for signal `\top.\timer_init' using process `\top.$proc$top.v:116$25'.
  created $dff cell `$procdff$238' with positive edge clock.
Creating register for signal `\top.\timer_start_up' using process `\top.$proc$top.v:116$25'.
  created $dff cell `$procdff$239' with positive edge clock.
Creating register for signal `\top.\timer_start_down' using process `\top.$proc$top.v:116$25'.
  created $dff cell `$procdff$240' with positive edge clock.
Creating register for signal `\top.\timer_response' using process `\top.$proc$top.v:116$25'.
  created $dff cell `$procdff$241' with positive edge clock.
Creating register for signal `\top.\timer_wait_data' using process `\top.$proc$top.v:116$25'.
  created $dff cell `$procdff$242' with positive edge clock.
Creating register for signal `\top.\timer_bits' using process `\top.$proc$top.v:116$25'.
  created $dff cell `$procdff$243' with positive edge clock.
Creating register for signal `\top.\bit_done' using process `\top.$proc$top.v:116$25'.
  created $dff cell `$procdff$244' with positive edge clock.
Creating register for signal `\top.\dht11_out' using process `\top.$proc$top.v:116$25'.
  created $dff cell `$procdff$245' with positive edge clock.
Creating register for signal `\top.\fsm_state' using process `\top.$proc$top.v:81$6'.
  created $dff cell `$procdff$246' with positive edge clock.
Creating register for signal `\top.\count_clk50' using process `\top.$proc$top.v:36$1'.
  created $dff cell `$procdff$247' with positive edge clock.
Creating register for signal `\top.\clk_50M' using process `\top.$proc$top.v:36$1'.
  created $dff cell `$procdff$248' with positive edge clock.

2.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$top.v:0$46'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:194$45'.
Removing empty process `top.$proc$top.v:194$45'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:184$44'.
Removing empty process `top.$proc$top.v:184$44'.
Found and cleaned up 6 empty switches in `\top.$proc$top.v:116$25'.
Removing empty process `top.$proc$top.v:116$25'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:89$7'.
Removing empty process `top.$proc$top.v:89$7'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:81$6'.
Removing empty process `top.$proc$top.v:81$6'.
Found and cleaned up 2 empty switches in `\top.$proc$top.v:36$1'.
Removing empty process `top.$proc$top.v:36$1'.
Cleaned up 12 empty switches.

2.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 37 unused cells and 114 unused wires.

2.6. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.7. Executing OPT pass (performing simple optimizations).

2.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 5 cells.

2.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $procmux$162: { $procmux$168_CMP $procmux$167_CMP $procmux$166_CMP $procmux$165_CMP $procmux$164_CMP $procmux$163_CMP }
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.

2.7.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.7.8. Rerunning OPT passes. (Maybe there is more to do..)

2.7.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.7.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.7.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.7.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.7.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.7.14. Finished OPT passes. (There is nothing left to do.)

2.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from mux cell top.$ternary$top.v:93$9 ($mux).
Removed top 1 bits (of 3) from mux cell top.$ternary$top.v:96$11 ($mux).
Removed top 2 bits (of 3) from mux cell top.$ternary$top.v:99$13 ($mux).
Removed top 2 bits (of 3) from mux cell top.$ternary$top.v:105$21 ($mux).
Removed top 26 bits (of 32) from port B of cell top.$lt$top.v:108$22 ($lt).
Removed top 2 bits (of 3) from mux cell top.$ternary$top.v:108$23 ($mux).
Removed top 1 bits (of 3) from mux cell top.$ternary$top.v:108$24 ($mux).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:133$26 ($add).
Removed top 7 bits (of 32) from port Y of cell top.$add$top.v:133$26 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:137$27 ($add).
Removed top 10 bits (of 32) from port Y of cell top.$add$top.v:137$27 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:141$28 ($add).
Removed top 20 bits (of 32) from port Y of cell top.$add$top.v:141$28 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:152$29 ($add).
Removed top 17 bits (of 32) from port Y of cell top.$add$top.v:152$29 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:158$31 ($add).
Removed top 19 bits (of 32) from port Y of cell top.$add$top.v:158$31 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:163$33 ($add).
Removed top 18 bits (of 32) from port Y of cell top.$add$top.v:163$33 ($add).
Removed top 2 bits (of 14) from port B of cell top.$eq$top.v:165$34 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$procmux$104_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$procmux$114_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$procmux$123_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$procmux$166_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$procmux$167_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$procmux$168_CMP0 ($eq).
Removed top 7 bits (of 32) from wire top.$add$top.v:133$26_Y.
Removed top 10 bits (of 32) from wire top.$add$top.v:137$27_Y.
Removed top 2 bits (of 3) from wire top.$ternary$top.v:105$21_Y.
Removed top 2 bits (of 3) from wire top.$ternary$top.v:108$23_Y.
Removed top 1 bits (of 3) from wire top.$ternary$top.v:108$24_Y.
Removed top 2 bits (of 3) from wire top.$ternary$top.v:93$9_Y.
Removed top 1 bits (of 3) from wire top.$ternary$top.v:96$11_Y.
Removed top 2 bits (of 3) from wire top.$ternary$top.v:99$13_Y.

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 8 unused wires.

2.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.4. Finished fast OPT passes.

2.12. Printing statistics.

=== top ===

   Number of wires:                 88
   Number of wire bits:            599
   Number of public wires:          14
   Number of public wire bits:     118
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 85
     $add                            6
     $and                            8
     $dff                           10
     $dlatch                         1
     $eq                            18
     $logic_not                      2
     $lt                             1
     $mux                           27
     $not                            8
     $pmux                           4

2.13. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \top

3.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.9. Executing PROC_DFF pass (convert process syncs to FFs).

4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

5. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 2c7945aa5a, CPU: user 0.11s system 0.01s, MEM: 12.25 MB peak
Yosys 0.33+6 (git sha1 41b34a193, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1694128612374/work=/usr/local/src/conda/yosys-0.33_7_g41b34a193 -fdebug-prefix-map=/home/brandon/miniconda3/envs/digital=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)
Time spent: 26% 7x opt_expr (0 sec), 21% 5x opt_clean (0 sec), ...
