
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33+6 (git sha1 41b34a193, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1694128612374/work=/usr/local/src/conda/yosys-0.33_7_g41b34a193 -fdebug-prefix-map=/home/brandon/miniconda3/envs/digital=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)


-- Parsing `top.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (top.v:52)
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json build/top.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.

2.3.1. Analyzing design hierarchy..
Top module:  \top

2.3.2. Analyzing design hierarchy..
Top module:  \top
Removing unused module `$abstract\top'.
Removed 1 unused modules.

2.4. Executing PROC pass (convert processes to netlists).

2.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\top.$proc$top.v:117$405'.
Cleaned up 3 empty switches.

2.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$241 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$234 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$230 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$223 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$220 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$217 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$214 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$211 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$203 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$196 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$192 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$185 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$182 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$179 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$176 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$173 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $proc$top.v:195$432 in module top.
Marked 1 switch rules as full_case in process $proc$top.v:185$431 in module top.
Marked 3 switch rules as full_case in process $proc$top.v:117$405 in module top.
Marked 1 switch rules as full_case in process $proc$top.v:90$387 in module top.
Marked 1 switch rules as full_case in process $proc$top.v:82$386 in module top.
Marked 2 switch rules as full_case in process $proc$top.v:37$381 in module top.
Removed a total of 0 dead cases.

2.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 41 assignments to connections.

2.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$244'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$229'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$222'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$216'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$213'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$210'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$206'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$191'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$184'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$181'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$178'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$175'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$172'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$170'.
  Set init value: \Q = 1'0
Found init rule in `\top.$proc$top.v:0$433'.
  Set init value: \humidity = 16'0000000000000000
  Set init value: \temperature = 16'0000000000000000
  Set init value: \valid = 1'0
  Set init value: \state = 3'000
  Set init value: \fsm_state = 3'000
  Set init value: \shift_reg = 40'0000000000000000000000000000000000000000
  Set init value: \bit_count = 6'000000
  Set init value: \timer_init = 25'0000000000000000000000000
  Set init value: \timer_start_up = 12'000000000000
  Set init value: \timer_start_down = 22'0000000000000000000000
  Set init value: \timer_response = 15'000000000000000
  Set init value: \timer_wait_data = 13'0000000000000
  Set init value: \timer_bits = 14'00000000000000
  Set init value: \bit_done = 1'0
  Set init value: \dht11_out = 1'1
  Set init value: \count_clk50 = 3'000
  Set init value: \clk_50M = 1'0

2.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Found async reset \R in `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Found async reset \S in `\SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
Found async reset \R in `\SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
Found async reset \S in `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Found async reset \R in `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Found async reset \S in `\SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$182'.
Found async reset \R in `\SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$176'.

2.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Creating decoders for process `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Creating decoders for process `\SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$216'.
Creating decoders for process `\SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$213'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$211'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Creating decoders for process `\SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:882$207'.
Creating decoders for process `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$206'.
Creating decoders for process `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$192'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$191'.
Creating decoders for process `\SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$185'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$184'.
Creating decoders for process `\SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$182'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$181'.
Creating decoders for process `\SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$179'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$178'.
Creating decoders for process `\SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$176'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$175'.
Creating decoders for process `\SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$173'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$172'.
Creating decoders for process `\SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$171'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$170'.
Creating decoders for process `\SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:271$169'.
Creating decoders for process `\top.$proc$top.v:0$433'.
Creating decoders for process `\top.$proc$top.v:195$432'.
     1/1: $1\state[2:0]
Creating decoders for process `\top.$proc$top.v:185$431'.
     1/2: $0\temperature[15:0]
     2/2: $0\humidity[15:0]
Creating decoders for process `\top.$proc$top.v:117$405'.
     1/11: $0\dht11_out[0:0]
     2/11: $0\bit_done[0:0]
     3/11: $0\timer_bits[13:0]
     4/11: $0\timer_wait_data[12:0]
     5/11: $0\timer_response[14:0]
     6/11: $0\timer_start_down[21:0]
     7/11: $0\timer_start_up[11:0]
     8/11: $0\timer_init[24:0]
     9/11: $0\bit_count[5:0]
    10/11: $0\shift_reg[39:0]
    11/11: $0\valid[0:0]
Creating decoders for process `\top.$proc$top.v:90$387'.
     1/1: $1\next_state[2:0]
Creating decoders for process `\top.$proc$top.v:82$386'.
     1/1: $0\fsm_state[2:0]
Creating decoders for process `\top.$proc$top.v:37$381'.
     1/2: $0\count_clk50[2:0]
     2/2: $0\clk_50M[0:0]

2.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\top.\next_state' from process `\top.$proc$top.v:90$387'.

2.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
  created $adff cell `$procdff$616' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
  created $dff cell `$procdff$617' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
  created $adff cell `$procdff$618' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
  created $dff cell `$procdff$619' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
  created $adff cell `$procdff$620' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
  created $dff cell `$procdff$621' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
  created $adff cell `$procdff$622' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$211'.
  created $dff cell `$procdff$623' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$209'.
  created $dff cell `$procdff$624' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:882$207'.
  created $dff cell `$procdff$625' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$203'.
  created $adff cell `$procdff$626' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$196'.
  created $dff cell `$procdff$627' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$192'.
  created $adff cell `$procdff$628' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$185'.
  created $dff cell `$procdff$629' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$182'.
  created $adff cell `$procdff$630' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$179'.
  created $dff cell `$procdff$631' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$176'.
  created $adff cell `$procdff$632' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$173'.
  created $dff cell `$procdff$633' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$171'.
  created $dff cell `$procdff$634' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:271$169'.
  created $dff cell `$procdff$635' with positive edge clock.
Creating register for signal `\top.\state' using process `\top.$proc$top.v:195$432'.
  created $dff cell `$procdff$636' with positive edge clock.
Creating register for signal `\top.\humidity' using process `\top.$proc$top.v:185$431'.
  created $dff cell `$procdff$637' with positive edge clock.
Creating register for signal `\top.\temperature' using process `\top.$proc$top.v:185$431'.
  created $dff cell `$procdff$638' with positive edge clock.
Creating register for signal `\top.\valid' using process `\top.$proc$top.v:117$405'.
  created $dff cell `$procdff$639' with positive edge clock.
Creating register for signal `\top.\shift_reg' using process `\top.$proc$top.v:117$405'.
  created $dff cell `$procdff$640' with positive edge clock.
Creating register for signal `\top.\bit_count' using process `\top.$proc$top.v:117$405'.
  created $dff cell `$procdff$641' with positive edge clock.
Creating register for signal `\top.\timer_init' using process `\top.$proc$top.v:117$405'.
  created $dff cell `$procdff$642' with positive edge clock.
Creating register for signal `\top.\timer_start_up' using process `\top.$proc$top.v:117$405'.
  created $dff cell `$procdff$643' with positive edge clock.
Creating register for signal `\top.\timer_start_down' using process `\top.$proc$top.v:117$405'.
  created $dff cell `$procdff$644' with positive edge clock.
Creating register for signal `\top.\timer_response' using process `\top.$proc$top.v:117$405'.
  created $dff cell `$procdff$645' with positive edge clock.
Creating register for signal `\top.\timer_wait_data' using process `\top.$proc$top.v:117$405'.
  created $dff cell `$procdff$646' with positive edge clock.
Creating register for signal `\top.\timer_bits' using process `\top.$proc$top.v:117$405'.
  created $dff cell `$procdff$647' with positive edge clock.
Creating register for signal `\top.\bit_done' using process `\top.$proc$top.v:117$405'.
  created $dff cell `$procdff$648' with positive edge clock.
Creating register for signal `\top.\dht11_out' using process `\top.$proc$top.v:117$405'.
  created $dff cell `$procdff$649' with positive edge clock.
Creating register for signal `\top.\fsm_state' using process `\top.$proc$top.v:82$386'.
  created $dff cell `$procdff$650' with positive edge clock.
Creating register for signal `\top.\count_clk50' using process `\top.$proc$top.v:37$381'.
  created $dff cell `$procdff$651' with positive edge clock.
Creating register for signal `\top.\clk_50M' using process `\top.$proc$top.v:37$381'.
  created $dff cell `$procdff$652' with positive edge clock.

2.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$244'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$241'.
Removing empty process `SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$234'.
Removing empty process `SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$230'.
Removing empty process `SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$229'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$223'.
Removing empty process `SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$222'.
Removing empty process `SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$220'.
Removing empty process `SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$217'.
Removing empty process `SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$216'.
Removing empty process `SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$214'.
Removing empty process `SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$213'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$211'.
Removing empty process `SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$210'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$209'.
Removing empty process `SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:882$207'.
Removing empty process `SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$206'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$203'.
Removing empty process `SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$202'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$196'.
Removing empty process `SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$195'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$192'.
Removing empty process `SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$191'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$185'.
Removing empty process `SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$184'.
Removing empty process `SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$182'.
Removing empty process `SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$181'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$179'.
Removing empty process `SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$178'.
Removing empty process `SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$176'.
Removing empty process `SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$175'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$173'.
Removing empty process `SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$172'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$171'.
Removing empty process `SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$170'.
Removing empty process `SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:271$169'.
Removing empty process `top.$proc$top.v:0$433'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:195$432'.
Removing empty process `top.$proc$top.v:195$432'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:185$431'.
Removing empty process `top.$proc$top.v:185$431'.
Found and cleaned up 6 empty switches in `\top.$proc$top.v:117$405'.
Removing empty process `top.$proc$top.v:117$405'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:90$387'.
Removing empty process `top.$proc$top.v:90$387'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:82$386'.
Removing empty process `top.$proc$top.v:82$386'.
Found and cleaned up 2 empty switches in `\top.$proc$top.v:37$381'.
Removing empty process `top.$proc$top.v:37$381'.
Cleaned up 30 empty switches.

2.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.5. Executing FLATTEN pass (flatten design).

2.6. Executing TRIBUF pass.

2.7. Executing DEMINOUT pass (demote inout ports to input or output).

2.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 38 unused cells and 108 unused wires.

2.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 7 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.6. Executing OPT_DFF pass (perform DFF optimizations).

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 7 unused wires.

2.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.9. Rerunning OPT passes. (Maybe there is more to do..)

2.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.13. Executing OPT_DFF pass (perform DFF optimizations).

2.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.16. Finished OPT passes. (There is nothing left to do.)

2.12. Executing FSM pass (extract and optimize FSM).

2.12.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.bit_count as FSM state register:
    Register has an initialization value.
Not marking top.fsm_state as FSM state register:
    Register has an initialization value.

2.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$650 ($dff) from module top (D = \next_state, Q = \fsm_state, rval = 3'000).
Adding SRST signal on $procdff$649 ($dff) from module top (D = $procmux$491_Y, Q = \dht11_out, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$654 ($sdff) from module top (D = $procmux$491_Y, Q = \dht11_out).
Adding SRST signal on $procdff$648 ($dff) from module top (D = $procmux$506_Y, Q = \bit_done, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$658 ($sdff) from module top (D = $procmux$506_Y, Q = \bit_done).
Adding SRST signal on $procdff$647 ($dff) from module top (D = $procmux$516_Y, Q = \timer_bits, rval = 14'00000000000000).
Adding EN signal on $auto$ff.cc:266:slice$668 ($sdff) from module top (D = $procmux$516_Y, Q = \timer_bits).
Adding SRST signal on $procdff$646 ($dff) from module top (D = $procmux$526_Y, Q = \timer_wait_data, rval = 13'0000000000000).
Adding EN signal on $auto$ff.cc:266:slice$676 ($sdff) from module top (D = $add$top.v:159$418_Y [12:0], Q = \timer_wait_data).
Adding SRST signal on $procdff$645 ($dff) from module top (D = $procmux$534_Y, Q = \timer_response, rval = 15'000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$682 ($sdff) from module top (D = $add$top.v:153$416_Y [14:0], Q = \timer_response).
Adding SRST signal on $procdff$644 ($dff) from module top (D = $procmux$544_Y, Q = \timer_start_down, rval = 22'0000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$684 ($sdff) from module top (D = $add$top.v:138$407_Y [21:0], Q = \timer_start_down).
Adding SRST signal on $procdff$643 ($dff) from module top (D = $procmux$553_Y, Q = \timer_start_up, rval = 12'000000000000).
Adding EN signal on $auto$ff.cc:266:slice$686 ($sdff) from module top (D = $add$top.v:142$408_Y [11:0], Q = \timer_start_up).
Adding SRST signal on $procdff$642 ($dff) from module top (D = $procmux$564_Y, Q = \timer_init, rval = 25'0000000000000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$688 ($sdff) from module top (D = $add$top.v:134$406_Y [24:0], Q = \timer_init).
Adding EN signal on $procdff$641 ($dff) from module top (D = 6'000000, Q = \bit_count).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$690 ($dffe) from module top.
Setting constant 0-bit at position 1 on $auto$ff.cc:266:slice$690 ($dffe) from module top.
Setting constant 0-bit at position 2 on $auto$ff.cc:266:slice$690 ($dffe) from module top.
Setting constant 0-bit at position 3 on $auto$ff.cc:266:slice$690 ($dffe) from module top.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$690 ($dffe) from module top.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$690 ($dffe) from module top.

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 16 unused cells and 16 unused wires.

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 2 cells.

2.13.13. Executing OPT_DFF pass (perform DFF optimizations).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 4 unused wires.

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.16. Rerunning OPT passes. (Maybe there is more to do..)

2.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.20. Executing OPT_DFF pass (perform DFF optimizations).

2.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.23. Finished OPT passes. (There is nothing left to do.)

2.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 3) from mux cell top.$ternary$top.v:94$389 ($mux).
Removed top 1 bits (of 3) from mux cell top.$ternary$top.v:97$391 ($mux).
Removed top 2 bits (of 3) from mux cell top.$ternary$top.v:100$393 ($mux).
Removed top 2 bits (of 3) from mux cell top.$ternary$top.v:106$401 ($mux).
Removed top 2 bits (of 3) from mux cell top.$ternary$top.v:109$403 ($mux).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:134$406 ($add).
Removed top 7 bits (of 32) from port Y of cell top.$add$top.v:134$406 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:138$407 ($add).
Removed top 10 bits (of 32) from port Y of cell top.$add$top.v:138$407 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:142$408 ($add).
Removed top 20 bits (of 32) from port Y of cell top.$add$top.v:142$408 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:153$416 ($add).
Removed top 17 bits (of 32) from port Y of cell top.$add$top.v:153$416 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:159$418 ($add).
Removed top 19 bits (of 32) from port Y of cell top.$add$top.v:159$418 ($add).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:164$420 ($add).
Removed top 18 bits (of 32) from port Y of cell top.$add$top.v:164$420 ($add).
Removed top 2 bits (of 14) from port B of cell top.$eq$top.v:166$421 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$eq$top.v:182$427 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$eq$top.v:182$428 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$procmux$492_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell top.$procmux$493_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$procmux$535_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell top.$procmux$597_CMP0 ($eq).
Removed top 7 bits (of 32) from wire top.$add$top.v:134$406_Y.
Removed top 10 bits (of 32) from wire top.$add$top.v:138$407_Y.
Removed top 20 bits (of 32) from wire top.$add$top.v:142$408_Y.
Removed top 17 bits (of 32) from wire top.$add$top.v:153$416_Y.
Removed top 19 bits (of 32) from wire top.$add$top.v:159$418_Y.
Removed top 18 bits (of 32) from wire top.$add$top.v:164$420_Y.
Removed top 2 bits (of 3) from wire top.$ternary$top.v:100$393_Y.
Removed top 2 bits (of 3) from wire top.$ternary$top.v:94$389_Y.
Removed top 1 bits (of 3) from wire top.$ternary$top.v:97$391_Y.

2.15. Executing PEEPOPT pass (run peephole optimizers).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 9 unused wires.

2.17. Executing SHARE pass (SAT-based resource sharing).

2.18. Executing TECHMAP pass (map to technology primitives).

2.18.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.18.2. Continuing TECHMAP pass.
No more expansions possible.

2.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$top.v:134$406 ($add).
  creating $macc model for $add$top.v:138$407 ($add).
  creating $macc model for $add$top.v:142$408 ($add).
  creating $macc model for $add$top.v:153$416 ($add).
  creating $macc model for $add$top.v:159$418 ($add).
  creating $macc model for $add$top.v:164$420 ($add).
  creating $alu model for $macc $add$top.v:164$420.
  creating $alu model for $macc $add$top.v:159$418.
  creating $alu model for $macc $add$top.v:153$416.
  creating $alu model for $macc $add$top.v:142$408.
  creating $alu model for $macc $add$top.v:138$407.
  creating $alu model for $macc $add$top.v:134$406.
  creating $alu cell for $add$top.v:134$406: $auto$alumacc.cc:485:replace_alu$701
  creating $alu cell for $add$top.v:138$407: $auto$alumacc.cc:485:replace_alu$704
  creating $alu cell for $add$top.v:142$408: $auto$alumacc.cc:485:replace_alu$707
  creating $alu cell for $add$top.v:153$416: $auto$alumacc.cc:485:replace_alu$710
  creating $alu cell for $add$top.v:159$418: $auto$alumacc.cc:485:replace_alu$713
  creating $alu cell for $add$top.v:164$420: $auto$alumacc.cc:485:replace_alu$716
  created 6 $alu and 0 $macc cells.

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.6. Executing OPT_DFF pass (perform DFF optimizations).

2.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.22.9. Finished OPT passes. (There is nothing left to do.)

2.23. Executing MEMORY pass.

2.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).

2.26. Executing TECHMAP pass (map to technology primitives).

2.26.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

2.26.2. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

2.26.3. Continuing TECHMAP pass.
No more expansions possible.

2.27. Executing ICE40_BRAMINIT pass.

2.28. Executing OPT pass (performing simple optimizations).

2.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.28.3. Executing OPT_DFF pass (perform DFF optimizations).

2.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 9 unused wires.

2.28.5. Finished fast OPT passes.

2.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.30. Executing OPT pass (performing simple optimizations).

2.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    Consolidated identical input bits for $mux cell $ternary$top.v:103$397:
      Old ports: A=3'011, B=3'101, Y=$ternary$top.v:103$397_Y
      New ports: A=2'01, B=2'10, Y=$ternary$top.v:103$397_Y [2:1]
      New connections: $ternary$top.v:103$397_Y [0] = 1'1
  Optimizing cells in module \top.
Performed a total of 1 changes.

2.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.6. Executing OPT_DFF pass (perform DFF optimizations).

2.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.9. Rerunning OPT passes. (Maybe there is more to do..)

2.30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.13. Executing OPT_DFF pass (perform DFF optimizations).

2.30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.16. Finished OPT passes. (There is nothing left to do.)

2.31. Executing ICE40_WRAPCARRY pass (wrap carries).

2.32. Executing TECHMAP pass (map to technology primitives).

2.32.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.32.2. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $tribuf.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$c6885379b74fbbf6906b35106e386e521d86cbb2\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using template $paramod$080e6a70eb8bfa1ccf22d9718e795074645029a4\_80_ice40_alu for cells of type $alu.
Using template $paramod$8f780356cb6cdb52f6a744190131b65634639c4e\_80_ice40_alu for cells of type $alu.
Using template $paramod$3b7577489eb4433b1d5620cab7f3794743dee5ea\_80_ice40_alu for cells of type $alu.
Using template $paramod$215440792383f7884e57d9c95f84e9552d0bf4ac\_80_ice40_alu for cells of type $alu.
Using template $paramod$713617589782cfade849bb573b5c36106c4b708f\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$a285b5a57fe61eabc57c91b8c412748ee1151a85\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.

2.33. Executing OPT pass (performing simple optimizations).

2.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 75 cells.

2.33.3. Executing OPT_DFF pass (perform DFF optimizations).

2.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 56 unused cells and 213 unused wires.

2.33.5. Finished fast OPT passes.

2.34. Executing ICE40_OPT pass (performing simple optimizations).

2.34.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$701.slice[0].carry: CO=\timer_init [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$704.slice[0].carry: CO=\timer_start_down [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$707.slice[0].carry: CO=\timer_start_up [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$710.slice[0].carry: CO=\timer_response [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$713.slice[0].carry: CO=\timer_wait_data [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$716.slice[0].carry: CO=\timer_bits [0]

2.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.34.4. Executing OPT_DFF pass (perform DFF optimizations).

2.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.34.6. Rerunning OPT passes. (Removed registers in this run.)

2.34.7. Running ICE40 specific optimizations.

2.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.34.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.34.10. Executing OPT_DFF pass (perform DFF optimizations).

2.34.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.34.12. Finished OPT passes. (There is nothing left to do.)

2.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.36. Executing TECHMAP pass (map to technology primitives).

2.36.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.36.2. Continuing TECHMAP pass.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
No more expansions possible.

2.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$704.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$707.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$710.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$713.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$716.slice[0].carry ($lut).
Mapping top.$auto$alumacc.cc:485:replace_alu$701.slice[0].carry ($lut).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 165 cells.

2.39.4. Executing OPT_DFF pass (perform DFF optimizations).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 823 unused wires.

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.39.10. Executing OPT_DFF pass (perform DFF optimizations).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 275 gates and 397 wires to a netlist network with 121 inputs and 34 outputs.

2.41.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =      46.
ABC: Participating nodes from both networks       =     107.
ABC: Participating nodes from the first network   =      45. (  54.88 % of nodes)
ABC: Participating nodes from the second network  =      62. (  75.61 % of nodes)
ABC: Node pairs (any polarity)                    =      45. (  54.88 % of names can be moved)
ABC: Node pairs (same polarity)                   =      42. (  51.22 % of names can be moved)
ABC: Total runtime =     0.08 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       81
ABC RESULTS:        internal signals:      242
ABC RESULTS:           input signals:      121
ABC RESULTS:          output signals:       34
Removing temp directory.

2.42. Executing ICE40_WRAPCARRY pass (wrap carries).

2.43. Executing TECHMAP pass (map to technology primitives).

2.43.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.43.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 6 unused cells and 282 unused wires.

2.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      176
  1-LUT                6
  2-LUT               27
  3-LUT              103
  4-LUT               40
  with \SB_CARRY    (#0)   89
  with \SB_CARRY    (#1)   89

Eliminating LUTs.
Number of LUTs:      176
  1-LUT                6
  2-LUT               27
  3-LUT              103
  4-LUT               40
  with \SB_CARRY    (#0)   89
  with \SB_CARRY    (#1)   89

Combining LUTs.
Number of LUTs:      163
  1-LUT                6
  2-LUT               13
  3-LUT               92
  4-LUT               52
  with \SB_CARRY    (#0)   89
  with \SB_CARRY    (#1)   89

Eliminated 0 LUTs.
Combined 13 LUTs.

2.45. Executing TECHMAP pass (map to technology primitives).

2.45.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.45.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$92ae337dcfbfd75c23b894780eb529dcdde84bb2\$lut for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$6d6beead1425af15cf78b27fd9b11b41b5d4bce8\$lut for cells of type $lut.
Using template $paramod$7d45bd12c01d1778446c9474bd2c34ae7ad041ca\$lut for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod$cbf9b59fd0bce03020827724d25c571fd021f069\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01000000 for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod$cde3aa23c1efa60a470cf0f0281347d6ba585afa\$lut for cells of type $lut.
Using template $paramod$d35161d1d7976dcc02e7c7d51172431be85143b4\$lut for cells of type $lut.
Using template $paramod$038e0c6bb407d70fb3d4b03becb2402bb36ab4a0\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod$d4fae2c0d9ad2966369cd4e39b81c71bcd1327c9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11110100 for cells of type $lut.
Using template $paramod$0d709b8c133785f04f3bc7f0657ef7e79d5ab1ce\$lut for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod$fd1e68d43235621014e35437b4508a97628b7e8f\$lut for cells of type $lut.
Using template $paramod$9d707d218adbd63b6f9a0c79d7ee037306fb6296\$lut for cells of type $lut.
Using template $paramod$3204210736873ef5d53b95f3dbe4714b354f9351\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010100 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 353 unused wires.

2.46. Executing AUTONAME pass.
Renamed 5171 objects in module top (26 iterations).

2.47. Executing HIERARCHY pass (managing design hierarchy).

2.47.1. Analyzing design hierarchy..
Top module:  \top

2.47.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.48. Printing statistics.

=== top ===

   Number of wires:                 72
   Number of wire bits:            408
   Number of public wires:          72
   Number of public wire bits:     408
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                359
     $_TBUF_                         1
     SB_CARRY                       89
     SB_DFFESR                     103
     SB_DFFSR                        3
     SB_LUT4                       163

2.49. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.50. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 5f9c5166e9, CPU: user 0.99s system 0.02s, MEM: 23.25 MB peak
Yosys 0.33+6 (git sha1 41b34a193, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1694128612374/work=/usr/local/src/conda/yosys-0.33_7_g41b34a193 -fdebug-prefix-map=/home/brandon/miniconda3/envs/digital=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)
Time spent: 38% 13x read_verilog (0 sec), 18% 1x abc (0 sec), ...
