
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.33+6 (git sha1 41b34a193, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1694128612374/work=/usr/local/src/conda/yosys-0.33_7_g41b34a193 -fdebug-prefix-map=/home/brandon/miniconda3/envs/digital=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)


-- Parsing `top.v' using frontend ` -vlog2k' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Storing AST representation for module `$abstract\freqDiv'.
Storing AST representation for module `$abstract\bin2bcd'.
Storing AST representation for module `$abstract\LCD'.
Storing AST representation for module `$abstract\top'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json build/top.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\top'.
Generating RTLIL representation for module `\top'.
top.v:73: Warning: Identifier `\RS' is implicitly declared.
top.v:74: Warning: Identifier `\E' is implicitly declared.
top.v:75: Warning: Identifier `\RW' is implicitly declared.
top.v:80: Warning: Identifier `\D0' is implicitly declared.
top.v:81: Warning: Identifier `\D1' is implicitly declared.
top.v:82: Warning: Identifier `\D2' is implicitly declared.
top.v:83: Warning: Identifier `\D3' is implicitly declared.
top.v:84: Warning: Identifier `\D4' is implicitly declared.
top.v:85: Warning: Identifier `\D5' is implicitly declared.
top.v:86: Warning: Identifier `\D6' is implicitly declared.
top.v:87: Warning: Identifier `\D7' is implicitly declared.

2.3.1. Analyzing design hierarchy..
Top module:  \top

2.3.2. Executing AST frontend in derive mode using pre-parsed AST for module `\LCD'.
Generating RTLIL representation for module `\LCD'.

2.3.3. Executing AST frontend in derive mode using pre-parsed AST for module `\bin2bcd'.
Generating RTLIL representation for module `\bin2bcd'.

2.3.4. Executing AST frontend in derive mode using pre-parsed AST for module `\freqDiv'.
Generating RTLIL representation for module `\freqDiv'.

2.3.5. Analyzing design hierarchy..
Top module:  \top
Used module:     \LCD
Used module:     \bin2bcd
Used module:     \freqDiv

2.3.6. Analyzing design hierarchy..
Top module:  \top
Used module:     \LCD
Used module:     \bin2bcd
Used module:     \freqDiv
Removing unused module `$abstract\top'.
Removing unused module `$abstract\LCD'.
Removing unused module `$abstract\bin2bcd'.
Removing unused module `$abstract\freqDiv'.
Removed 4 unused modules.

2.4. Executing PROC pass (convert processes to netlists).

2.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$235 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$224 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$221 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$218 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$215 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$212 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$197 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$186 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$183 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$180 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$177 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$174 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $proc$./freqDiv.v:20$492 in module freqDiv.
Marked 24 switch rules as full_case in process $proc$./bin2bcd.v:12$443 in module bin2bcd.
Marked 9 switch rules as full_case in process $proc$./LCD.v:47$399 in module LCD.
Marked 1 switch rules as full_case in process $proc$./LCD.v:28$395 in module LCD.
Marked 1 switch rules as full_case in process $proc$top.v:20$382 in module top.
Removed a total of 0 dead cases.

2.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 58 assignments to connections.

2.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$245'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$241'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$234'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$230'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$223'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$220'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$217'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$214'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$211'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$209'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$207'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$203'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$196'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$192'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$185'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$182'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$179'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$176'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$173'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$171'.
  Set init value: \Q = 1'0
Found init rule in `\freqDiv.$proc$./freqDiv.v:17$497'.
  Set init value: \count = 2'00
Found init rule in `\freqDiv.$proc$./freqDiv.v:0$496'.
  Set init value: \CLK_OUT = 1'0
Found init rule in `\LCD.$proc$./LCD.v:0$442'.
  Set init value: \counter = 16'0000000000000000
  Set init value: \dat = 8'00000000
  Set init value: \rs = 1'0
  Set init value: \current = 6'000000
  Set init value: \next = 6'000000
  Set init value: \clkR = 1'0
Found init rule in `\top.$proc$top.v:17$388'.
  Set init value: \counter = 8'00000000

2.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242'.
Found async reset \R in `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231'.
Found async reset \S in `\SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$221'.
Found async reset \R in `\SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$215'.
Found async reset \S in `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204'.
Found async reset \R in `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193'.
Found async reset \S in `\SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$183'.
Found async reset \R in `\SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$177'.

2.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$245'.
Creating decoders for process `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$241'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$235'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$234'.
Creating decoders for process `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$230'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$224'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$223'.
Creating decoders for process `\SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$221'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$220'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$218'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$217'.
Creating decoders for process `\SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$215'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$214'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$212'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$211'.
Creating decoders for process `\SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$210'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$209'.
Creating decoders for process `\SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:882$208'.
Creating decoders for process `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$207'.
Creating decoders for process `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$203'.
Creating decoders for process `\SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$197'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$196'.
Creating decoders for process `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$192'.
Creating decoders for process `\SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$186'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$185'.
Creating decoders for process `\SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$183'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$182'.
Creating decoders for process `\SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$180'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$179'.
Creating decoders for process `\SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$177'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$176'.
Creating decoders for process `\SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$174'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$173'.
Creating decoders for process `\SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$172'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$171'.
Creating decoders for process `\SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:271$170'.
Creating decoders for process `\freqDiv.$proc$./freqDiv.v:17$497'.
Creating decoders for process `\freqDiv.$proc$./freqDiv.v:0$496'.
Creating decoders for process `\freqDiv.$proc$./freqDiv.v:20$492'.
     1/2: $0\count[1:0]
     2/2: $0\CLK_OUT[0:0]
Creating decoders for process `\bin2bcd.$proc$./bin2bcd.v:12$443'.
     1/24: $24\bcd[11:8]
     2/24: $23\bcd[7:4]
     3/24: $22\bcd[3:0]
     4/24: $21\bcd[11:8]
     5/24: $20\bcd[7:4]
     6/24: $19\bcd[3:0]
     7/24: $18\bcd[11:8]
     8/24: $17\bcd[7:4]
     9/24: $16\bcd[3:0]
    10/24: $15\bcd[11:8]
    11/24: $14\bcd[7:4]
    12/24: $13\bcd[3:0]
    13/24: $12\bcd[11:8]
    14/24: $11\bcd[7:4]
    15/24: $10\bcd[3:0]
    16/24: $9\bcd[11:8]
    17/24: $8\bcd[7:4]
    18/24: $7\bcd[3:0]
    19/24: $6\bcd[11:8]
    20/24: $5\bcd[7:4]
    21/24: $4\bcd[3:0]
    22/24: $3\bcd[11:8]
    23/24: $2\bcd[7:4]
    24/24: $1\bcd[3:0]
Creating decoders for process `\LCD.$proc$./LCD.v:0$442'.
Creating decoders for process `\LCD.$proc$./LCD.v:47$399'.
     1/9: $1\next[5:0]
     2/9: $1\bin_to_ascii$func$./LCD.v:54$394.$result[7:0]$438
     3/9: $1\bin_to_ascii$func$./LCD.v:53$393.$result[7:0]$433
     4/9: $1\bin_to_ascii$func$./LCD.v:52$392.$result[7:0]$428
     5/9: $1\bin_to_ascii$func$./LCD.v:51$391.$result[7:0]$423
     6/9: $1\bin_to_ascii$func$./LCD.v:50$390.$result[7:0]$418
     7/9: $1\bin_to_ascii$func$./LCD.v:49$389.$result[7:0]$413
     8/9: $0\rs[0:0]
     9/9: $0\dat[7:0]
Creating decoders for process `\LCD.$proc$./LCD.v:28$395'.
     1/1: $1\clkR[0:0]
Creating decoders for process `\top.$proc$top.v:17$388'.
Creating decoders for process `\top.$proc$top.v:20$382'.
     1/1: $0\counter[7:0]

2.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\bin2bcd.\hundreds' from process `\bin2bcd.$proc$./bin2bcd.v:12$443'.
No latch inferred for signal `\bin2bcd.\tens' from process `\bin2bcd.$proc$./bin2bcd.v:12$443'.
No latch inferred for signal `\bin2bcd.\units' from process `\bin2bcd.$proc$./bin2bcd.v:12$443'.
No latch inferred for signal `\bin2bcd.\i' from process `\bin2bcd.$proc$./bin2bcd.v:12$443'.
No latch inferred for signal `\bin2bcd.\bcd' from process `\bin2bcd.$proc$./bin2bcd.v:12$443'.

2.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242'.
  created $adff cell `$procdff$721' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$235'.
  created $dff cell `$procdff$722' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231'.
  created $adff cell `$procdff$723' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$224'.
  created $dff cell `$procdff$724' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$221'.
  created $adff cell `$procdff$725' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$218'.
  created $dff cell `$procdff$726' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$215'.
  created $adff cell `$procdff$727' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$212'.
  created $dff cell `$procdff$728' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$210'.
  created $dff cell `$procdff$729' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:882$208'.
  created $dff cell `$procdff$730' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204'.
  created $adff cell `$procdff$731' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$197'.
  created $dff cell `$procdff$732' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193'.
  created $adff cell `$procdff$733' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$186'.
  created $dff cell `$procdff$734' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$183'.
  created $adff cell `$procdff$735' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$180'.
  created $dff cell `$procdff$736' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$177'.
  created $adff cell `$procdff$737' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$174'.
  created $dff cell `$procdff$738' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$172'.
  created $dff cell `$procdff$739' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:271$170'.
  created $dff cell `$procdff$740' with positive edge clock.
Creating register for signal `\freqDiv.\CLK_OUT' using process `\freqDiv.$proc$./freqDiv.v:20$492'.
  created $dff cell `$procdff$741' with positive edge clock.
Creating register for signal `\freqDiv.\count' using process `\freqDiv.$proc$./freqDiv.v:20$492'.
  created $dff cell `$procdff$742' with positive edge clock.
Creating register for signal `\LCD.\dat' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$743' with positive edge clock.
Creating register for signal `\LCD.\rs' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$744' with positive edge clock.
Creating register for signal `\LCD.\current' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$745' with positive edge clock.
Creating register for signal `\LCD.\next' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$746' with positive edge clock.
Creating register for signal `\LCD.\hum_hundreds_ASCII' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$747' with positive edge clock.
Creating register for signal `\LCD.\hum_tens_ASCII' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$748' with positive edge clock.
Creating register for signal `\LCD.\hum_units_ASCII' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$749' with positive edge clock.
Creating register for signal `\LCD.\tem_hundreds_ASCII' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$750' with positive edge clock.
Creating register for signal `\LCD.\tem_tens_ASCII' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$751' with positive edge clock.
Creating register for signal `\LCD.\tem_units_ASCII' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$752' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:49$389.$result' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$753' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:49$389.bin' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$754' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:50$390.$result' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$755' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:50$390.bin' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$756' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:51$391.$result' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$757' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:51$391.bin' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$758' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:52$392.$result' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$759' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:52$392.bin' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$760' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:53$393.$result' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$761' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:53$393.bin' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$762' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:54$394.$result' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$763' with positive edge clock.
Creating register for signal `\LCD.\bin_to_ascii$func$./LCD.v:54$394.bin' using process `\LCD.$proc$./LCD.v:47$399'.
  created $dff cell `$procdff$764' with positive edge clock.
Creating register for signal `\LCD.\counter' using process `\LCD.$proc$./LCD.v:28$395'.
  created $dff cell `$procdff$765' with positive edge clock.
Creating register for signal `\LCD.\clkR' using process `\LCD.$proc$./LCD.v:28$395'.
  created $dff cell `$procdff$766' with positive edge clock.
Creating register for signal `\top.\counter' using process `\top.$proc$top.v:20$382'.
  created $dff cell `$procdff$767' with positive edge clock.

2.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$245'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242'.
Removing empty process `SB_DFFNES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1414$242'.
Removing empty process `SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$241'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$235'.
Removing empty process `SB_DFFNESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1353$235'.
Removing empty process `SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$234'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231'.
Removing empty process `SB_DFFNER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1273$231'.
Removing empty process `SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$230'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$224'.
Removing empty process `SB_DFFNESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1212$224'.
Removing empty process `SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$223'.
Removing empty process `SB_DFFNS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1138$221'.
Removing empty process `SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$220'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$218'.
Removing empty process `SB_DFFNSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1088$218'.
Removing empty process `SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$217'.
Removing empty process `SB_DFFNR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:1017$215'.
Removing empty process `SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$214'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$212'.
Removing empty process `SB_DFFNSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:967$212'.
Removing empty process `SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$211'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$210'.
Removing empty process `SB_DFFNE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:922$210'.
Removing empty process `SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$209'.
Removing empty process `SB_DFFN.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:882$208'.
Removing empty process `SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$207'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204'.
Removing empty process `SB_DFFES.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:803$204'.
Removing empty process `SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$203'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$197'.
Removing empty process `SB_DFFESS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:742$197'.
Removing empty process `SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$196'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193'.
Removing empty process `SB_DFFER.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:662$193'.
Removing empty process `SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$192'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$186'.
Removing empty process `SB_DFFESR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:601$186'.
Removing empty process `SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$185'.
Removing empty process `SB_DFFS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:527$183'.
Removing empty process `SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$182'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$180'.
Removing empty process `SB_DFFSS.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:477$180'.
Removing empty process `SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$179'.
Removing empty process `SB_DFFR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:406$177'.
Removing empty process `SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$176'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$174'.
Removing empty process `SB_DFFSR.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:356$174'.
Removing empty process `SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$173'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$172'.
Removing empty process `SB_DFFE.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:311$172'.
Removing empty process `SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:0$171'.
Removing empty process `SB_DFF.$proc$/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_sim.v:271$170'.
Removing empty process `freqDiv.$proc$./freqDiv.v:17$497'.
Removing empty process `freqDiv.$proc$./freqDiv.v:0$496'.
Found and cleaned up 1 empty switch in `\freqDiv.$proc$./freqDiv.v:20$492'.
Removing empty process `freqDiv.$proc$./freqDiv.v:20$492'.
Found and cleaned up 24 empty switches in `\bin2bcd.$proc$./bin2bcd.v:12$443'.
Removing empty process `bin2bcd.$proc$./bin2bcd.v:12$443'.
Removing empty process `LCD.$proc$./LCD.v:0$442'.
Found and cleaned up 9 empty switches in `\LCD.$proc$./LCD.v:47$399'.
Removing empty process `LCD.$proc$./LCD.v:47$399'.
Found and cleaned up 1 empty switch in `\LCD.$proc$./LCD.v:28$395'.
Removing empty process `LCD.$proc$./LCD.v:28$395'.
Removing empty process `top.$proc$top.v:17$388'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:20$382'.
Removing empty process `top.$proc$top.v:20$382'.
Cleaned up 54 empty switches.

2.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module freqDiv.
Optimizing module bin2bcd.
Optimizing module LCD.
Optimizing module top.

2.5. Executing FLATTEN pass (flatten design).
Deleting now unused module freqDiv.
Deleting now unused module bin2bcd.
Deleting now unused module LCD.

2.6. Executing TRIBUF pass.

2.7. Executing DEMINOUT pass (demote inout ports to input or output).

2.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 243 unused cells and 469 unused wires.

2.10. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.6. Executing OPT_DFF pass (perform DFF optimizations).

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 12 unused wires.

2.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.9. Rerunning OPT passes. (Maybe there is more to do..)

2.11.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.11.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.11.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.11.13. Executing OPT_DFF pass (perform DFF optimizations).

2.11.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.11.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.11.16. Finished OPT passes. (There is nothing left to do.)

2.12. Executing FSM pass (extract and optimize FSM).

2.12.1. Executing FSM_DETECT pass (finding FSMs in design).

2.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$767 ($dff) from module top (D = $add$top.v:23$384_Y [7:0], Q = \counter, rval = 8'00000000).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.9. Rerunning OPT passes. (Maybe there is more to do..)

2.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.13.13. Executing OPT_DFF pass (perform DFF optimizations).

2.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.13.16. Finished OPT passes. (There is nothing left to do.)

2.14. Executing WREDUCE pass (reducing word size of cells).
Removed top 25 bits (of 32) from port B of cell top.$lt$top.v:22$383 ($lt).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:23$384 ($add).
Removed top 24 bits (of 32) from port Y of cell top.$add$top.v:23$384 ($add).
Removed top 27 bits (of 32) from port B of cell top.$lt$top.v:31$385 ($lt).
Removed top 24 bits (of 32) from wire top.$add$top.v:23$384_Y.

2.15. Executing PEEPOPT pass (run peephole optimizers).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.

2.17. Executing SHARE pass (SAT-based resource sharing).

2.18. Executing TECHMAP pass (map to technology primitives).

2.18.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.18.2. Continuing TECHMAP pass.
No more expansions possible.

2.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$top.v:23$384 ($add).
  creating $alu model for $macc $add$top.v:23$384.
  creating $alu model for $lt$top.v:22$383 ($lt): new $alu
  creating $alu model for $lt$top.v:31$385 ($lt): new $alu
  creating $alu cell for $lt$top.v:31$385: $auto$alumacc.cc:485:replace_alu$773
  creating $alu cell for $lt$top.v:22$383: $auto$alumacc.cc:485:replace_alu$784
  creating $alu cell for $add$top.v:23$384: $auto$alumacc.cc:485:replace_alu$795
  created 3 $alu and 0 $macc cells.

2.22. Executing OPT pass (performing simple optimizations).

2.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.6. Executing OPT_DFF pass (perform DFF optimizations).

2.22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 3 unused wires.

2.22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.22.9. Rerunning OPT passes. (Maybe there is more to do..)

2.22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.22.13. Executing OPT_DFF pass (perform DFF optimizations).

2.22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.22.16. Finished OPT passes. (There is nothing left to do.)

2.23. Executing MEMORY pass.

2.23.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.23.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.23.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.23.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.23.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.23.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.23.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.23.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.23.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.23.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.25. Executing MEMORY_LIBMAP pass (mapping memories to cells).

2.26. Executing TECHMAP pass (map to technology primitives).

2.26.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K_'.
Successfully finished Verilog frontend.

2.26.2. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/spram_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/spram_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_SPRAM_'.
Successfully finished Verilog frontend.

2.26.3. Continuing TECHMAP pass.
No more expansions possible.

2.27. Executing ICE40_BRAMINIT pass.

2.28. Executing OPT pass (performing simple optimizations).

2.28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.28.3. Executing OPT_DFF pass (perform DFF optimizations).

2.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.28.5. Finished fast OPT passes.

2.29. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.30. Executing OPT pass (performing simple optimizations).

2.30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.30.6. Executing OPT_DFF pass (perform DFF optimizations).

2.30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.30.9. Finished OPT passes. (There is nothing left to do.)

2.31. Executing ICE40_WRAPCARRY pass (wrap carries).

2.32. Executing TECHMAP pass (map to technology primitives).

2.32.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.32.2. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.32.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_80_ice40_alu for cells of type $alu.
Using template $paramod$dfca81329cbbac01700318224209a5f2318c7128\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$cc48387a3f2cae79a81035f3d5a9b4758cb77854\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.

2.33. Executing OPT pass (performing simple optimizations).

2.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 20 cells.

2.33.3. Executing OPT_DFF pass (perform DFF optimizations).

2.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 55 unused wires.

2.33.5. Finished fast OPT passes.

2.34. Executing ICE40_OPT pass (performing simple optimizations).

2.34.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$773.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$773.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$784.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$773.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) top.$auto$alumacc.cc:485:replace_alu$795.slice[0].carry: CO=\counter [0]

2.34.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.34.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 1 cells.

2.34.4. Executing OPT_DFF pass (perform DFF optimizations).

2.34.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 0 unused wires.

2.34.6. Rerunning OPT passes. (Removed registers in this run.)

2.34.7. Running ICE40 specific optimizations.

2.34.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.34.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.34.10. Executing OPT_DFF pass (perform DFF optimizations).

2.34.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.34.12. Finished OPT passes. (There is nothing left to do.)

2.35. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.36. Executing TECHMAP pass (map to technology primitives).

2.36.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.36.2. Continuing TECHMAP pass.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
No more expansions possible.

2.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping top.$auto$alumacc.cc:485:replace_alu$795.slice[0].carry ($lut).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 1 cells.

2.39.4. Executing OPT_DFF pass (perform DFF optimizations).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 44 unused wires.

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.39.10. Executing OPT_DFF pass (perform DFF optimizations).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 26 gates and 38 wires to a netlist network with 12 inputs and 10 outputs.

2.41.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress <abc-temp-dir>/input.blif 
ABC: Total number of equiv classes                =      15.
ABC: Participating nodes from both networks       =      28.
ABC: Participating nodes from the first network   =      14. (  93.33 % of nodes)
ABC: Participating nodes from the second network  =      14. (  93.33 % of nodes)
ABC: Node pairs (any polarity)                    =      14. (  93.33 % of names can be moved)
ABC: Node pairs (same polarity)                   =      14. (  93.33 % of names can be moved)
ABC: Total runtime =     0.02 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       14
ABC RESULTS:        internal signals:       16
ABC RESULTS:           input signals:       12
ABC RESULTS:          output signals:       10
Removing temp directory.

2.42. Executing ICE40_WRAPCARRY pass (wrap carries).

2.43. Executing TECHMAP pass (map to technology primitives).

2.43.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.43.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 15 unused cells and 36 unused wires.

2.44. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       21
  1-LUT                8
  2-LUT                2
  3-LUT                7
  4-LUT                4
  with \SB_CARRY    (#0)    6
  with \SB_CARRY    (#1)    6

Eliminating LUTs.
Number of LUTs:       21
  1-LUT                8
  2-LUT                2
  3-LUT                7
  4-LUT                4
  with \SB_CARRY    (#0)    6
  with \SB_CARRY    (#1)    6

Combining LUTs.
Number of LUTs:       21
  1-LUT                8
  2-LUT                2
  3-LUT                7
  4-LUT                4
  with \SB_CARRY    (#0)    6
  with \SB_CARRY    (#1)    6

Eliminated 0 LUTs.
Combined 0 LUTs.

2.45. Executing TECHMAP pass (map to technology primitives).

2.45.1. Executing Verilog-2005 frontend: /home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/brandon/miniconda3/envs/digital/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.45.2. Continuing TECHMAP pass.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$b4d0f4738a5ce50c7f36c2aa2ecc09cfb874f2b6\$lut for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10001111 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 43 unused wires.

2.46. Executing AUTONAME pass.
Renamed 290 objects in module top (12 iterations).

2.47. Executing HIERARCHY pass (managing design hierarchy).

2.47.1. Analyzing design hierarchy..
Top module:  \top

2.47.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.48. Printing statistics.

=== top ===

   Number of wires:                 21
   Number of wire bits:            145
   Number of public wires:          21
   Number of public wire bits:     145
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 49
     SB_CARRY                       20
     SB_DFFSR                        8
     SB_LUT4                        21

2.49. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

2.50. Executing JSON backend.

Warnings: 11 unique messages, 11 total
End of script. Logfile hash: 68f0567758, CPU: user 0.80s system 0.03s, MEM: 21.12 MB peak
Yosys 0.33+6 (git sha1 41b34a193, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/root/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1694128612374/work=/usr/local/src/conda/yosys-0.33_7_g41b34a193 -fdebug-prefix-map=/home/brandon/miniconda3/envs/digital=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)
Time spent: 55% 13x read_verilog (0 sec), 13% 1x abc (0 sec), ...
